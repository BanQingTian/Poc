import { Schema, MapSchema, ArraySchema } from '@colyseus/schema';
import { Client } from '../Protocol';
import { Room } from '../Room';
declare enum ReactionType {
    THUMBSUP = 0,
    HEART = 1,
    LAUGH = 2,
    SURPRISE = 3,
    SAD = 4,
    ANGRY = 5
}
declare class Member extends Schema {
    name: string;
    typing: boolean;
}
declare class Reaction extends Schema {
    type: ReactionType;
}
declare abstract class Message extends Schema {
    id: number;
    timestamp: number;
    reactions: ArraySchema<Reaction>;
}
declare class ChatState extends Schema {
    members: MapSchema<Member>;
    messages: ArraySchema<Message>;
}
export interface ChatOptions {
}
export declare class ChatRoom extends Room<ChatState> {
    onCreate(options: any): Promise<void>;
    onJoin(client: Client, options: ChatOptions): void;
    onMessage(client: Client, message: any): void;
    onLeave(client: Client): void;
    onDispose(): void;
}
export {};
