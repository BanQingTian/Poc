"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("@colyseus/schema");
const Room_1 = require("../Room");
var ReactionType;
(function (ReactionType) {
    ReactionType[ReactionType["THUMBSUP"] = 0] = "THUMBSUP";
    ReactionType[ReactionType["HEART"] = 1] = "HEART";
    ReactionType[ReactionType["LAUGH"] = 2] = "LAUGH";
    ReactionType[ReactionType["SURPRISE"] = 3] = "SURPRISE";
    ReactionType[ReactionType["SAD"] = 4] = "SAD";
    ReactionType[ReactionType["ANGRY"] = 5] = "ANGRY";
})(ReactionType || (ReactionType = {}));
class Member extends schema_1.Schema {
}
__decorate([
    schema_1.type("string")
], Member.prototype, "name", void 0);
__decorate([
    schema_1.type("boolean")
], Member.prototype, "typing", void 0);
class Reaction extends schema_1.Schema {
}
__decorate([
    schema_1.type("uint8")
], Reaction.prototype, "type", void 0);
class Message extends schema_1.Schema {
}
__decorate([
    schema_1.type("number")
], Message.prototype, "id", void 0);
__decorate([
    schema_1.type("number")
], Message.prototype, "timestamp", void 0);
__decorate([
    schema_1.type([Reaction])
], Message.prototype, "reactions", void 0);
class TextMessage extends Message {
}
__decorate([
    schema_1.type("string")
], TextMessage.prototype, "text", void 0);
class ChatState extends schema_1.Schema {
    constructor() {
        super(...arguments);
        this.members = new schema_1.MapSchema();
        this.messages = new schema_1.ArraySchema();
    }
}
__decorate([
    schema_1.type({ map: Member })
], ChatState.prototype, "members", void 0);
__decorate([
    schema_1.type([Message])
], ChatState.prototype, "messages", void 0);
class ChatRoom extends Room_1.Room {
    onCreate(options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.setState(new ChatState());
        });
    }
    onJoin(client, options) {
    }
    onMessage(client, message) {
        const user = this.state.members[client.sessionId];
        if (message.typing) {
            user.typing = Boolean(message.typing);
        }
        else if (message.text) {
            user.typing = false;
            const textMessage = new TextMessage();
            textMessage.text = message.text;
            textMessage.timestamp = Date.now();
            this.state.messages.push(textMessage);
        }
        else if (message.reaction) {
        }
    }
    onLeave(client) {
    }
    onDispose() {
    }
}
exports.ChatRoom = ChatRoom;
